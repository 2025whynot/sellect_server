name: CI with Gradle

on:
  push:
    branches: [ "feature/cicd" ]

# 테스트 결과 작성을 위해 쓰기권한 추가
permissions: write-all
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: make application.yml
        run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "spring.datasource.url=jdbc:mysql://${{ secrets.DB_HOST }}:3306/${{ secrets.DB_NAME }}" > ./application.yml
          echo "spring.datasource.username=${{ secrets.DB_USERNAME }}" >> ./application.yml
          echo "spring.datasource.password=${{ secrets.DB_PASSWORD }}" >> ./application.yml
          echo "spring.jpa.hibernate.ddl-auto=${{ secrets.DDL_AUTO }}" >> ./application.yml
        shell: bash

      # gradle을 캐싱 - 시간 단축
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant Execute Permission For Gradlew
        run: chmod +x gradlew

      - name: Build With Gradle
        run: ./gradlew build -x test

      # build Test
      - name: 테스트 코드 실행
        run: ./gradlew --info test

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: ${{ always() }}
        with:
          files: build/test-results/**/*.xml

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'

      - name: Docker build & Push
        run: |
          # 로그인
          echo "Logging in to Docker Hub..."
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          
          # 이미지 빌드 및 푸시
          echo "Building and pushing Docker image..."
          docker build -t ${{ secrets.DOCKER_USERNAME }}/sellect-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/sellect-app:latest

      - name: Deploy
        uses: appleboy/ssh-action@master
        env:
          COMPOSE: "/home/ubuntu/compose/docker-compose.yml"
        with:
          username: ubuntu
          host: ${{ secrets.EC2_HOST }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: COMPOSE
          script: |
            # Docker login in EC2
            echo "Logging in to Docker Hub on EC2..."
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            
            # Docker Compose 다운 및 이미지 Pull
            echo "Stopping Docker Compose and pulling latest image..."
            sudo docker-compose -f $COMPOSE down
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/sellect-app:latest
            
            # Docker Compose up
            echo "Starting Docker Compose with the latest image..."
            sudo docker-compose -f $COMPOSE up -d
