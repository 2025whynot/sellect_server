name: CI with Gradle

on:
  push:
    branches: [ "feature/cicd" ]

# 테스트 결과 작성을 위해 쓰기권한 추가
permissions: write-all
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: make application.yml
        run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "DATABASE=${{ secrets.DATABASE }}" > ./application.yml
        shell: bash

      # gradle을 캐싱 - 시간 단축
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant Execute Permission For Gradlew
        run: chmod +x gradlew

      - name: Build With Gradle
        run: ./gradlew build -x test

      # build Test
      - name: 테스트 코드 실행
        run: ./gradlew --info test

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: ${{ always() }}
        with:
          files: build/test-results/**/*.xml

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'

      - name: Docker build & Push
        run: |
          docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/sellect-app .
          docker push ${{ secrets.DOCKER_USERNAME }}/sellect-app

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
            host: ${{ secrets.EC2_HOST }}
            username: ubuntu
            key: ${{ secrets.EC2_PRIVATE_KEY }}

            script: |
              sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
              sudo docker rm -f $(sudo docker ps -qa) || true
              sudo docker pull ${{ secrets.DOCKER_USERNAME }}/sellect-app
              sudo docker-compose up -d
              sudo docker image prune -f